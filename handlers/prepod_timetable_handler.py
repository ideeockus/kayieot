import requests
import json
from storage import make_s_msg_obj, users_storage, keyboards, state, timetable_output_mode
import logging

def handle(event):
    user_id = event['object']['message']['from_id']
    r_msg = event['object']['message']['text'] # received message
    #s_msg = "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
    #keyboard = keyboards['main']
    prepods_list = []
    try:
        prepods_list = getOptionsList(r_msg)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
        print(e)
    if(len(prepods_list)<1):
        s_msg = "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è "+r_msg
        keyboard = keyboards['main']
        users_storage[user_id]['state'] = state.WAIT_PREPOD_NAME
        #s_msg_obj = make_s_msg_obj(s_msg, keyboard)
        #return s_msg_obj
    if(len(prepods_list)>1 and len(prepods_list)<=6):
        s_msg = "—É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
        keyboard = make_optionprepod_keyboard(prepods_list)
        users_storage[user_id]['state'] = state.WAIT_PREPOD_NAME
        #s_msg_obj = make_s_msg_obj(s_msg, keyboard)
        #return s_msg_obj
    if(len(prepods_list)>6):
        s_msg = "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —É—Ç–æ—á–Ω–∏—Ç–µ"
        keyboard = keyboards['main']
        users_storage[user_id]['state'] = state.WAIT_PREPOD_NAME
        #s_msg_obj = make_s_msg_obj(s_msg, keyboard)
        #return s_msg_obj
    if(len(prepods_list)==1):
        prepod_timetable = getPrepodTimetable(prepods_list[0])
        s_msg = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {prepods_list[0]['lecturer']}\n{formatPrepodTimetable(prepod_timetable)}"
        keyboard = keyboards['main']
        users_storage[user_id]['state'] = state.INACTION
        #s_msg_obj = make_s_msg_obj(s_msg, keyboard)
        #return s_msg_obj
    s_msg_obj = make_s_msg_obj(s_msg=s_msg, keyboard=keyboard)
    return s_msg_obj


def getOptionsList(text): # —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è text
    url1 = "https://kai.ru/for-staff/raspisanie?p_p_id=pubLecturerSchedule_WAR_publicLecturerSchedule10&p_p_lifecycle=2&p_p_resource_id=getLecturersURL&query=" #–¥–ª—è prepod_login
    #s = requests.Session() # session
    r1 = requests.get(url1+text) # –ø–æ–ª—É—á–µ–Ω–∏–µ kai_id –≥—Ä—É–ø–ø—ã
    r1 = r1.json() # —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π 
    return r1

def getPrepodTimetable(prepod):
    prepod_timetable_url = "https://kai.ru/raspisanie"
    url2 = "https://kai.ru/for-staff/raspisanie?p_p_id=pubLecturerSchedule_WAR_publicLecturerSchedule10&p_p_lifecycle=2&p_p_resource_id=schedule" # –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    prepod_login = prepod['id']
    prepod_name = prepod['lecturer']
    r2 = requests.post(url2, {'prepodLogin': prepod_login})
    prepod_timetable = r2.json()
    return prepod_timetable

def formatPrepodTimetable(prepod_timetable):
    #weekdays = ["–≤—Å","–ø–Ω","–≤—Ç","—Å—Ä","—á—Ç","–ø—Ç","—Å–±"]
    weekdays = ["–≤—Å–∫—Ä–µ—Å–µ–Ω—å–µ","–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞"]
    result = ""
    #result+="—Ä–∞—Å–ø–∏–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã "+prepod+"\n"

    tabledays = prepod_timetable.keys() # —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    tabledays = sorted(tabledays) # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–Ω–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    for day in tabledays:
        #print(day)
        result = result + "üìÜ" + weekdays[int(day)] + "\n"
        for lesson in prepod_timetable[day]:
            buildNum = lesson['buildNum'].strip().replace("-", "")
            buildSymbol = "üèü" if (buildNum.find("–û–õ–ò–ú–ü")>-1) else  "üèõ"
            #buildNum = buildNum + buildSymbol
            audNum = lesson['audNum'].strip().replace("-", "")
            build_aud = f"[{buildNum}{buildSymbol}, {audNum}]" # –∑–¥–∞–Ω–∏–µ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è
            if(buildNum==""): build_aud=f"[{audNum}]"
            if(audNum==""): build_aud=f"[{buildNum}{buildSymbol}]"
            if((buildNum=="") and (audNum=="")): build_aud=""
            if(buildNum!=""): buildNum = buildNum + buildSymbol
            dayTime = lesson['dayTime'].strip()
            disciplType = lesson['disciplType'].strip()
            disciplName = lesson['disciplName'].strip()
            group = lesson['group'].strip()
            dayDate = lesson['dayDate'].strip()
            if(dayDate=="–µ–∂–Ω"): dayDate=""
            if(len(dayDate)>1): dayDate=f"({dayDate})"
            result = result+ f"{build_aud} {dayDate} {dayTime} - {disciplType}  —É {group}\n"
            #logging.debug(result)
        result=result+"\n"
    return(result)

def make_optionprepod_keyboard(prepods_list):
    keyboard = {"inline": True, "buttons": []}
    """row = -1
    for i, prepod in enumerate(prepods_list): # The enumerate function gives us an iterable where each element is a tuple that contains the index of the item and the original item value
        if((i+1)==len(prepods_list)):
            keyboard['buttons'][row].append({'action': {'type': "text", 'label': prepod['lecturer']}})
            continue
        if(i%2==0):
            keyboard['buttons'].append([]) # –æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            row+=1
        keyboard['buttons'][row].append({'action': {'type': "text", 'label': prepod['lecturer']}})"""
    for i, prepod in enumerate(prepods_list): # The enumerate function gives us an iterable where each element is a tuple that contains the index of the item and the original item value
        keyboard['buttons'].append([{'action': {'type': "text", 'label': prepod['lecturer']}}])
        #keyboard['buttons'][i]['action']['type'] = "text"
        #keyboard['buttons'][i][0]['action']['label'] = prepod['lecturer']
    keyboard = json.dumps(keyboard) # –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞—Ä—è –≤ json —Ñ–æ—Ä–º–∞—Ç
    return keyboard