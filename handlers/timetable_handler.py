import requests
import json
from storage import make_s_msg_obj, users_storage, keyboards, state
import logging

def handle(event):
    user_id = event['object']['message']['from_id']
    r_msg = event['object']['message']['text'] # received message
    #s_msg = "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
    #keyboard = keyboards['main']

    groups_list = getOptionsList(r_msg)
    if(len(groups_list)<1):
        s_msg = "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É "+r_msg
        keyboard = keyboards['main']
        users_storage[user_id]['state'] = state.WAIT_GROUP
        #s_msg_obj = make_s_msg_obj(s_msg, keyboard)
        #return s_msg_obj
    if(len(groups_list)>1 and len(groups_list)<=10):
        s_msg = "—É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
        keyboard = make_optiongroup_keyboard(groups_list)
        users_storage[user_id]['state'] = state.WAIT_GROUP
        #s_msg_obj = make_s_msg_obj(s_msg, keyboard)
        #return s_msg_obj
    if(len(groups_list)>10):
        s_msg = "–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"
        keyboard = keyboards['main']
        users_storage[user_id]['state'] = state.WAIT_GROUP
        #s_msg_obj = make_s_msg_obj(s_msg, keyboard)
        #return s_msg_obj
    if(len(groups_list)==1):
        timetable = getTimetable(groups_list[0])
        s_msg = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {groups_list[0]['group']}\n{formatTimetable(timetable)}"
        keyboard = keyboards['main']
        users_storage[user_id]['state'] = state.INACTION
        #s_msg_obj = make_s_msg_obj(s_msg, keyboard)
        #return s_msg_obj
    s_msg_obj = make_s_msg_obj(s_msg, keyboard)
    return s_msg_obj


def getOptionsList(text): # —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è text
    url1 = "https://kai.ru/raspisanie?p_p_id=pubStudentSchedule_WAR_publicStudentSchedule10&p_p_lifecycle=2&p_p_resource_id=getGroupsURL&query=" #–¥–ª—è id –≥—Ä—É–ø–ø—ã
    #s = requests.Session() # session
    r1 = requests.get(url1+text) # –ø–æ–ª—É—á–µ–Ω–∏–µ kai_id –≥—Ä—É–ø–ø—ã
    r1 = r1.json() # —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π 
    return r1

def getTimetable(group):
    timetable_url = "https://kai.ru/raspisanie"
    url2 = "https://kai.ru/raspisanie?p_p_id=pubStudentSchedule_WAR_publicStudentSchedule10&p_p_lifecycle=2&p_p_resource_id=schedule" # –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    kai_group_id = group['id']
    kai_group_num = group['group']
    forma = group['forma']
    r2 = requests.post(url2, {'groupId': kai_group_id, 'programForm': forma})
    timetable = r2.json()
    return timetable

def formatTimetable(timetable):
    #weekdays = ["–≤—Å","–ø–Ω","–≤—Ç","—Å—Ä","—á—Ç","–ø—Ç","—Å–±"]
    weekdays = ["–≤—Å–∫—Ä–µ—Å–µ–Ω—å–µ","–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞"]
    result = ""
    #result+="—Ä–∞—Å–ø–∏–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã "+group+"\n"

    tabledays = timetable.keys() # —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    tabledays = sorted(tabledays) # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–Ω–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    for day in tabledays:
        #print(day)
        result = result + "üìÜ" + weekdays[int(day)] + "\n"
        for lesson in timetable[day]:
            buildNum = lesson['buildNum'].strip().replace("-", "")
            buildSymbol = "üèü" if (buildNum.find("–û–õ–ò–ú–ü")>-1) else  "üèõ"
            buildNum = buildNum + buildSymbol
            audNum = lesson['audNum'].strip().replace("-", "")
            build_aud = f"[{buildNum}, {audNum}]" # –∑–¥–∞–Ω–∏–µ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è
            if((buildNum=="") or (audNum=="")): build_aud=f"[{buildNum}{audNum}]"
            if((buildNum=="") and (audNum=="")): build_aud=""
            dayTime = lesson['dayTime'].strip()
            disciplType = lesson['disciplType'].strip()
            disciplName = lesson['disciplName'].strip()
            dayDate = lesson['dayDate'].strip()
            if(dayDate=="–µ–∂–Ω"): dayDate=""
            if(len(dayDate)>1): dayDate=f"({dayDate})"
            result = result+ f"{build_aud} {dayDate} {dayTime} {disciplType} - {disciplName}\n"
            #logging.debug(result)
        result=result+"\n"
    return(result)

def make_optiongroup_keyboard(groups_list):
    # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 5—Ö6
    keyboard = {"inline": True, "buttons": []}

    """buttons_count = len(groups_list)
    rows = buttons_count // 2
    #cols = buttons_count % 2
    template = []
    for i in range(0, rows): # 0, 1, 2, ... (rows) - –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç rows
        template.append([])
        template[i].append([])
        template[i].append([])
        if(i==rows-1 and buttons_count%2>0): template[i].append([]) # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –∏ –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–µ—á–µ—Ç–Ω–æ"""
    row = -1
    for i, group in enumerate(groups_list): # The enumerate function gives us an iterable where each element is a tuple that contains the index of the item and the original item value
        if((i+1)==len(groups_list)):
            keyboard['buttons'][row].append({'action': {'type': "text", 'label': group['group']}})
            continue
        if(i%2==0):
            keyboard['buttons'].append([]) # –æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            row+=1
        keyboard['buttons'][row].append({'action': {'type': "text", 'label': group['group']}})
        
        #keyboard['buttons'][i]['action']['type'] = "text"
        #keyboard['buttons'][i][0]['action']['label'] = 
    """for i, group in enumerate(groups_list): # The enumerate function gives us an iterable where each element is a tuple that contains the index of the item and the original item value
        keyboard['buttons'].append([{'action': {'type': "text", 'label': "group_num"}}])
        #keyboard['buttons'][i]['action']['type'] = "text"
        keyboard['buttons'][i][0]['action']['label'] = group['group']"""
    keyboard = json.dumps(keyboard) # –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞—Ä—è –≤ json —Ñ–æ—Ä–º–∞—Ç
    return keyboard